// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MessageStatus {
  sent
  delivered
  read
}

model User {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  username String @unique
  password String
  chats Chat[] @relation("UserChats")
  messages Message[] @relation("UserMessages")
  receipts MessageReceipt[]
}

model Chat {
  id String @id @default(uuid()) 
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  isGroup Boolean @default(false)
  name String?
  messages Message[] @relation("ChatMessages")
  users User[] @relation("UserChats")
}

model Message {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  content String
  senderId String
  chatId String
  replyToId String?
  sender User @relation("UserMessages", fields: [senderId], references: [id])
  chat Chat @relation("ChatMessages", fields: [chatId], references: [id])
  replyTo Message? @relation("MessageReplies", fields: [replyToId], references: [id])
  replies Message[] @relation("MessageReplies")
  receipts  MessageReceipt[]
}

model MessageReceipt {
  id String @id @default(uuid())
  messageId String
  userId String
  timestamp DateTime @default(now())
  status MessageStatus @default(sent)

  message Message @relation(fields: [messageId], references: [id])
  user User @relation(fields: [userId], references: [id])
  @@unique([messageId, userId])
}